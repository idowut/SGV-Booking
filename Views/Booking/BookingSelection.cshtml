@model SGV_Booking.ViewModels.BookingInfoProcess;

<!DOCTYPE html>
<html>
<head>
    <title>Booking Selection Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: lightblue;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        .display-header {
            background-color: #333;
            color: #fff;
            padding: 15px;
            text-align: center;
            font-size: 24px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .elem-group {
            margin-bottom: 20px;
        }

        label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

        input[type="number"],
        input[type="date"],
        select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
        }

        select {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            background-position: right center;
        }

        button[type="submit"] {
            background-color: #333;
            color: #fff;
            border: none;
            padding: 10px 20px;
            font-size: 18px;
            cursor: pointer;
            border-radius: 5px;
        }

    </style>
</head>
<body>
    <div class="container">
        <h1 class="display-header">Booking Selection</h1>

        <form>
            <div class="elem-group">
                <label for="guestNumber">Numer of Guest:</label>
                <input type="number" id="guestNumber" name="guestNumber" min="1" max="10" step="1" value="1" onchange="numGuestChange()">
            </div>

            <div class="elem-group">
                <label for="restaurantSelect">Select a Restaurant:</label>
                <select class="form-select" name="restaurantSelect" id="restaurantSelect" asp-items="@ViewBag.RestaurantsList" onchange="itemChanged(this.value)">
                    <option value="">Select Restaurant...</option>
                </select>
            </div>

            <div class="elem-group" id="bookingDate" style="display:none">
                testing
            </div>


            <div class="elem-group" id="datePickerContainer">
            </div>

            <div class="row">
                <div class="col-8">
                    <div id="slotPickerContainer">
                    </div>
                </div>
                <div class="col-4">
                    <div id="timePickerContainer">
                    </div>
                </div>
            </div>

            <div id="banquetOptions" style="display:none">
                <label for="banquetOption">Banquet Options:</label>
                <div class="alert alert-info">
                    <strong>Info:</strong> Some banquet selections are only available for bookings consisting of 4 of more guests.
                </div>
                <div id="banquetCardsList" class="d-flex justify-content-around"></div>
            </div>
            <button type="submit" style="margin-top:1rem">Next</button>

            <div class="col-4 p-2" id="banquetCard" style="display:none">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title" id="cardTitle">À la carte</h5>
                        <p class="card-text">The À la carte option allows customers to order each distinctive food item at the restaurant.</p>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="banquetOption" id="banquetAlaCarte">
                            <label class="form-check-label" for="flexRadioDefault1"></label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="alert alert-info" id="banquetGuestWarning" style="display:none">
                <strong>Info: </strong> Some banquet selections are only available for bookings consisting of 4 of more guests.
            </div>
        </form>
        <script>
            function numGuestChange(){
                itemChanged(document.getElementById('restaurantSelect').value)
            }

            function itemChanged(value) {
                fetch(`/Booking/restaurantInfo/?id=${value}`).then(response => {
                    console.log('response status: ' + response.status);
                    console.log('response msg: ' + response.statusText);
                    return response.json()
                })
                    .then(data => {
                        console.log(data);
                        createBanquetOptions(data);
                        createDatePicker(data);
                    })
                    .catch(err => console.log(err));
            }

            function createDatePicker(restaurant) {
                const container = document.getElementById('datePickerContainer');
                container.innerHTML = ''; // Clear the container

                const openDays = restaurant[0].openDays;
                const dateInput = document.createElement('input');
                dateInput.type = 'date';
                dateInput.id = 'datePicker';

                const dateLabel = document.createElement('label');
                dateLabel.innerHTML = 'Select a date:';
                container.appendChild(dateLabel);
                container.appendChild(dateInput);

                const currentDate = new Date();
                currentDate.setDate(currentDate.getDate() + 1);
                const minDate = currentDate.toISOString().split('T')[0];
                document.getElementById('datePicker').setAttribute('min', minDate);




                dateInput.addEventListener('change', function () {
                    const selectedDate = new Date(this.value);
                    const day = (selectedDate.getUTCDay() + 6) % 7; // Adjusting Sunday to be the last element, i.e., index 6 in our array

                    console.log(selectedDate);
                    console.log(currentDate);

                    const daysToDisable = getDaysToDisable(openDays);


                    if (selectedDate < currentDate) {
                        alert('Please select a date in the future.\n\nIf you\'d like to make on day bookings, Please contact restaurant for more information. ');
                        this.value = ''; // Clear the input
                    } else if (daysToDisable.includes(day)) {
                        alert('The selected date is not available. Please choose another date.');
                        this.value = ''; // Clear the input
                    }

                    if(this.value != ''){
                        createSlotPicker(restaurant);
                    }
                });
            }

            function getDaysToDisable(openDays) {
                console.log("Opendays: " + JSON.stringify(openDays))

                const daysOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; // starting from Monday
                const daysToDisable = [];

                daysOrder.forEach((day, index) => {
                    const key = 'open' + day;
                    if (!openDays[0][key]) daysToDisable.push(index);
                });

                console.log(daysToDisable)

                return daysToDisable;
            }

            function createSlotPicker(restaurant){
                const container = document.getElementById('slotPickerContainer')
                container.innerHTML = ''; // Clear the container

                const sittingLabel = document.createElement('label');
                sittingLabel.innerHTML = 'Select a sitting:';

                const timeSlotInput = document.createElement('select')
                timeSlotInput.id = 'slotPicker'
                timeSlotInput.classList.add("form-select")
                const defElement = document.createElement('option');
                defElement.value = "";
                defElement.textContent = "Select sitting...";
                timeSlotInput.appendChild(defElement);

                restaurant[0].openTimes.forEach((timeSlot) => {
                    const optionElement = document.createElement('option');

                    optionElement.value = timeSlot.timeSlotId;
                    optionElement.textContent = timeSlot.slotName + ` (${timeSlot.slotOpenTime} - ${timeSlot.slotCloseTime})`;
                    timeSlotInput.appendChild(optionElement);
                })

                container.appendChild(sittingLabel);
                container.appendChild(timeSlotInput);
                timeSlotInput.addEventListener("change", function(){
                    if (timeSlotInput.value != ''){
                        createTimePicker(restaurant);
                    }
                    else{
                        const container = document.getElementById('timePickerContainer')
                        container.innerHTML = '';
                    }
                });

            }

            function createTimePicker(restaurant){
                const timeLabel = document.createElement('label');
                timeLabel.innerHTML = 'Select a time:';
                const container = document.getElementById('timePickerContainer');
                container.innerHTML = '';

                const timeInput = document.createElement('select');
                timeInput.classList.add('form-select');
                timeInput.id = 'timepicker';

                const defElement = document.createElement('option');
                defElement.value = "";
                defElement.textContent = "Select time...";
                timeInput.appendChild(defElement);

                const selectedSlot = document.getElementById('slotPicker').value;
                const selectedDate = document.getElementById('datePicker').value;

                // Find the corresponding time slot in the restaurantData object                

                const chosenTimeSlot = restaurant[0].openTimes.find(slot => slot.timeSlotId == selectedSlot);

                console.log(chosenTimeSlot.slotOpenTime);

                const start = new Date(selectedDate);
                let [startHours, startMinutes, startSeconds] = chosenTimeSlot.slotOpenTime.split(':').map(Number);
                start.setHours(startHours, startMinutes, startSeconds);
                const startTimes = start.toTimeString();

                const close = new Date(chosenTimeSlot.slotCloseTime);
                let [closeHours, closeMinutes, closeSeconds] = chosenTimeSlot.slotCloseTime.split(':').map(Number);
                close.setHours(closeHours, closeMinutes, closeSeconds);
                const closeTimes = close.toTimeString();

                let startParts = startTimes.split(":");
                let startHour = parseInt(startParts[0]);
                let startMinute = parseInt(startParts[1]);
                let startTime = startHours * 60 + startMinutes;

                let closeParts = closeTimes.split(":"); // Adjusted variable name
                let closeHour = parseInt(closeParts[0]); // Adjusted variable name
                let closeMinute = parseInt(closeParts[1]); // Adjusted variable name
                let closeTime = closeHours * 60 + closeMinutes; // Adjusted variable name

                let increment = 15; // 15 minutes

                for (let i = startTime; i < closeTime; i += increment) { // Adjusted variable name
                    let hours = Math.floor(i / 60);
                    let minutes = i % 60;

                    let hoursStr = hours.toString().padStart(2, '0');
                    let minutesStr = minutes.toString().padStart(2, '0');

                    let timeStr = `${hoursStr}:${minutesStr}`;

                    let option = document.createElement('option');
                    option.value = timeStr;
                    option.text = timeStr;
                    timeInput.appendChild(option);

                    console.log('Option appended:', timeStr);
                }

                container.appendChild(timeLabel);
                container.appendChild(timeInput);
            }

            function createBanquetOptions(restaurant){
                if (document.getElementById('restaurantSelect').value != ''){
                    document.getElementById('banquetOptions').style.display = 'block';
                    let cardsContainer = document.getElementById('banquetCardsList');

                    while (cardsContainer.firstChild) {
                        cardsContainer.removeChild(cardsContainer.firstChild);
                    }

                    var baseCard = document.getElementById('banquetCard');

                    const banquetOptions = restaurant[0].banquets;

                    var newCard = baseCard.cloneNode(true);

                    newCard.style.display = 'block';
                    cardsContainer.appendChild(newCard)

                    Object.entries(banquetOptions).forEach(([key, banquet]) => {
                        var newCard = baseCard.cloneNode(true);
                        newCard.style.display = 'block';


                        newCard.querySelector('h5').innerText = banquet.banquetName;
                        var banquetInnerText = "";
                        Object.entries(banquet.banquetItems).forEach(([item, banquetInfo]) => {
                            banquetInnerText += banquetInfo.banquetItem1;
                            banquetInnerText += "\n";
                        })

                        newCard.querySelector('p').innerText = banquetInnerText;
                        if (document.getElementById('guestNumber').value >= banquet.banquetMinPeople){
                            cardsContainer.appendChild(newCard)
                        }
                    })

                }
                else{
                    var container = document.getElementById('banquetOptions');
                    var cardsContainer = document.getElementById('banquetCardsList');
                    while(cardsContainer.firstChild){
                        cardsContainer.removeChild(cardsContainer.firstChild);
                    }
                    container.style.display = "none";

                }
            }
        </script>

    </div>
</body>
</html>
